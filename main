{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3004,"databundleVersionId":861823,"sourceType":"competition"}],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-05-09T19:08:41.842845Z","iopub.execute_input":"2025-05-09T19:08:41.843138Z","iopub.status.idle":"2025-05-09T19:08:41.850574Z","shell.execute_reply.started":"2025-05-09T19:08:41.843113Z","shell.execute_reply":"2025-05-09T19:08:41.849743Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/digit-recognizer/sample_submission.csv\n/kaggle/input/digit-recognizer/train.csv\n/kaggle/input/digit-recognizer/test.csv\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/digit-recognizer/train.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T19:40:43.342549Z","iopub.execute_input":"2025-05-09T19:40:43.342862Z","iopub.status.idle":"2025-05-09T19:40:45.815562Z","shell.execute_reply.started":"2025-05-09T19:40:43.342836Z","shell.execute_reply":"2025-05-09T19:40:45.814683Z"}},"outputs":[],"execution_count":43},{"cell_type":"code","source":"df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T19:40:45.817024Z","iopub.execute_input":"2025-05-09T19:40:45.817299Z","iopub.status.idle":"2025-05-09T19:40:45.830876Z","shell.execute_reply.started":"2025-05-09T19:40:45.817278Z","shell.execute_reply":"2025-05-09T19:40:45.830047Z"}},"outputs":[{"execution_count":44,"output_type":"execute_result","data":{"text/plain":"   label  pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  \\\n0      1       0       0       0       0       0       0       0       0   \n1      0       0       0       0       0       0       0       0       0   \n2      1       0       0       0       0       0       0       0       0   \n3      4       0       0       0       0       0       0       0       0   \n4      0       0       0       0       0       0       0       0       0   \n\n   pixel8  ...  pixel774  pixel775  pixel776  pixel777  pixel778  pixel779  \\\n0       0  ...         0         0         0         0         0         0   \n1       0  ...         0         0         0         0         0         0   \n2       0  ...         0         0         0         0         0         0   \n3       0  ...         0         0         0         0         0         0   \n4       0  ...         0         0         0         0         0         0   \n\n   pixel780  pixel781  pixel782  pixel783  \n0         0         0         0         0  \n1         0         0         0         0  \n2         0         0         0         0  \n3         0         0         0         0  \n4         0         0         0         0  \n\n[5 rows x 785 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>label</th>\n      <th>pixel0</th>\n      <th>pixel1</th>\n      <th>pixel2</th>\n      <th>pixel3</th>\n      <th>pixel4</th>\n      <th>pixel5</th>\n      <th>pixel6</th>\n      <th>pixel7</th>\n      <th>pixel8</th>\n      <th>...</th>\n      <th>pixel774</th>\n      <th>pixel775</th>\n      <th>pixel776</th>\n      <th>pixel777</th>\n      <th>pixel778</th>\n      <th>pixel779</th>\n      <th>pixel780</th>\n      <th>pixel781</th>\n      <th>pixel782</th>\n      <th>pixel783</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 785 columns</p>\n</div>"},"metadata":{}}],"execution_count":44},{"cell_type":"code","source":"df.size","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T19:40:45.831751Z","iopub.execute_input":"2025-05-09T19:40:45.832127Z","iopub.status.idle":"2025-05-09T19:40:45.850739Z","shell.execute_reply.started":"2025-05-09T19:40:45.832105Z","shell.execute_reply":"2025-05-09T19:40:45.849801Z"}},"outputs":[{"execution_count":45,"output_type":"execute_result","data":{"text/plain":"32970000"},"metadata":{}}],"execution_count":45},{"cell_type":"code","source":"df.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T19:40:45.852752Z","iopub.execute_input":"2025-05-09T19:40:45.853017Z","iopub.status.idle":"2025-05-09T19:40:45.869521Z","shell.execute_reply.started":"2025-05-09T19:40:45.852995Z","shell.execute_reply":"2025-05-09T19:40:45.868786Z"}},"outputs":[{"execution_count":46,"output_type":"execute_result","data":{"text/plain":"(42000, 785)"},"metadata":{}}],"execution_count":46},{"cell_type":"code","source":"df.sample()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T19:40:45.870413Z","iopub.execute_input":"2025-05-09T19:40:45.870686Z","iopub.status.idle":"2025-05-09T19:40:45.895796Z","shell.execute_reply.started":"2025-05-09T19:40:45.870664Z","shell.execute_reply":"2025-05-09T19:40:45.894994Z"}},"outputs":[{"execution_count":47,"output_type":"execute_result","data":{"text/plain":"      label  pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  \\\n9479      2       0       0       0       0       0       0       0       0   \n\n      pixel8  ...  pixel774  pixel775  pixel776  pixel777  pixel778  pixel779  \\\n9479       0  ...         0         0         0         0         0         0   \n\n      pixel780  pixel781  pixel782  pixel783  \n9479         0         0         0         0  \n\n[1 rows x 785 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>label</th>\n      <th>pixel0</th>\n      <th>pixel1</th>\n      <th>pixel2</th>\n      <th>pixel3</th>\n      <th>pixel4</th>\n      <th>pixel5</th>\n      <th>pixel6</th>\n      <th>pixel7</th>\n      <th>pixel8</th>\n      <th>...</th>\n      <th>pixel774</th>\n      <th>pixel775</th>\n      <th>pixel776</th>\n      <th>pixel777</th>\n      <th>pixel778</th>\n      <th>pixel779</th>\n      <th>pixel780</th>\n      <th>pixel781</th>\n      <th>pixel782</th>\n      <th>pixel783</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>9479</th>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>1 rows Ã— 785 columns</p>\n</div>"},"metadata":{}}],"execution_count":47},{"cell_type":"code","source":"import matplotlib.pyplot as plt","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T19:40:48.334864Z","iopub.execute_input":"2025-05-09T19:40:48.335175Z","iopub.status.idle":"2025-05-09T19:40:48.339918Z","shell.execute_reply.started":"2025-05-09T19:40:48.335154Z","shell.execute_reply":"2025-05-09T19:40:48.339055Z"}},"outputs":[],"execution_count":48},{"cell_type":"code","source":"plt.imshow(df.iloc[9551,1:].values.reshape(28,28))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T19:40:49.794976Z","iopub.execute_input":"2025-05-09T19:40:49.795616Z","iopub.status.idle":"2025-05-09T19:40:49.966325Z","shell.execute_reply.started":"2025-05-09T19:40:49.795590Z","shell.execute_reply":"2025-05-09T19:40:49.965302Z"}},"outputs":[{"execution_count":49,"output_type":"execute_result","data":{"text/plain":"<matplotlib.image.AxesImage at 0x7c08461987d0>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":49},{"cell_type":"code","source":"# Predicting the value without using PCA(Principle Component Analysis)\n\nX = df.iloc[:,1:]\nY = df.iloc[:,0]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T19:40:50.367636Z","iopub.execute_input":"2025-05-09T19:40:50.367972Z","iopub.status.idle":"2025-05-09T19:40:50.372792Z","shell.execute_reply.started":"2025-05-09T19:40:50.367944Z","shell.execute_reply":"2025-05-09T19:40:50.371971Z"}},"outputs":[],"execution_count":50},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T19:40:52.444712Z","iopub.execute_input":"2025-05-09T19:40:52.444994Z","iopub.status.idle":"2025-05-09T19:40:52.448931Z","shell.execute_reply.started":"2025-05-09T19:40:52.444974Z","shell.execute_reply":"2025-05-09T19:40:52.448028Z"}},"outputs":[],"execution_count":51},{"cell_type":"code","source":"X_train,X_test,Y_train,Y_test = train_test_split(X,Y, test_size = 0.2, random_state = 42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T19:40:52.795336Z","iopub.execute_input":"2025-05-09T19:40:52.796012Z","iopub.status.idle":"2025-05-09T19:40:53.020872Z","shell.execute_reply.started":"2025-05-09T19:40:52.795982Z","shell.execute_reply":"2025-05-09T19:40:53.020092Z"}},"outputs":[],"execution_count":52},{"cell_type":"code","source":"X_train.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T19:40:53.260376Z","iopub.execute_input":"2025-05-09T19:40:53.260748Z","iopub.status.idle":"2025-05-09T19:40:53.266419Z","shell.execute_reply.started":"2025-05-09T19:40:53.260722Z","shell.execute_reply":"2025-05-09T19:40:53.265634Z"}},"outputs":[{"execution_count":53,"output_type":"execute_result","data":{"text/plain":"(33600, 784)"},"metadata":{}}],"execution_count":53},{"cell_type":"code","source":"print(X_train.isnull().sum()) \n# No missing Value\nprint(X_test.isnull().sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T19:40:59.730755Z","iopub.execute_input":"2025-05-09T19:40:59.731066Z","iopub.status.idle":"2025-05-09T19:40:59.775386Z","shell.execute_reply.started":"2025-05-09T19:40:59.731041Z","shell.execute_reply":"2025-05-09T19:40:59.774556Z"}},"outputs":[{"name":"stdout","text":"pixel0      0\npixel1      0\npixel2      0\npixel3      0\npixel4      0\n           ..\npixel779    0\npixel780    0\npixel781    0\npixel782    0\npixel783    0\nLength: 784, dtype: int64\npixel0      0\npixel1      0\npixel2      0\npixel3      0\npixel4      0\n           ..\npixel779    0\npixel780    0\npixel781    0\npixel782    0\npixel783    0\nLength: 784, dtype: int64\n","output_type":"stream"}],"execution_count":54},{"cell_type":"code","source":"from sklearn.neighbors import KNeighborsClassifier","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T19:41:02.015575Z","iopub.execute_input":"2025-05-09T19:41:02.015861Z","iopub.status.idle":"2025-05-09T19:41:02.020070Z","shell.execute_reply.started":"2025-05-09T19:41:02.015841Z","shell.execute_reply":"2025-05-09T19:41:02.019111Z"}},"outputs":[],"execution_count":55},{"cell_type":"code","source":"knn = KNeighborsClassifier()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T19:41:02.426665Z","iopub.execute_input":"2025-05-09T19:41:02.426974Z","iopub.status.idle":"2025-05-09T19:41:02.431230Z","shell.execute_reply.started":"2025-05-09T19:41:02.426942Z","shell.execute_reply":"2025-05-09T19:41:02.430354Z"}},"outputs":[],"execution_count":56},{"cell_type":"code","source":"knn.fit(X_train,Y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T19:41:02.875203Z","iopub.execute_input":"2025-05-09T19:41:02.875535Z","iopub.status.idle":"2025-05-09T19:41:02.997929Z","shell.execute_reply.started":"2025-05-09T19:41:02.875503Z","shell.execute_reply":"2025-05-09T19:41:02.997241Z"}},"outputs":[{"execution_count":57,"output_type":"execute_result","data":{"text/plain":"KNeighborsClassifier()","text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":57},{"cell_type":"code","source":"# As we have not done Feature Extraction from the data using Principal Component Analysis this process will take lot's of time to get train and predict the result\nimport time\nstart = time.time()\nY_pred = knn.predict(X_test)\nprint(time.time() - start)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T19:41:04.385126Z","iopub.execute_input":"2025-05-09T19:41:04.385407Z","iopub.status.idle":"2025-05-09T19:41:16.606997Z","shell.execute_reply.started":"2025-05-09T19:41:04.385385Z","shell.execute_reply":"2025-05-09T19:41:16.605996Z"}},"outputs":[{"name":"stdout","text":"12.217168092727661\n","output_type":"stream"}],"execution_count":58},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score\naccuracy_score(Y_test,Y_pred)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T19:41:16.608604Z","iopub.execute_input":"2025-05-09T19:41:16.608927Z","iopub.status.idle":"2025-05-09T19:41:16.615850Z","shell.execute_reply.started":"2025-05-09T19:41:16.608898Z","shell.execute_reply":"2025-05-09T19:41:16.615049Z"}},"outputs":[{"execution_count":59,"output_type":"execute_result","data":{"text/plain":"0.9648809523809524"},"metadata":{}}],"execution_count":59},{"cell_type":"code","source":"#  NOW LET'S APPLY PCA BEFORE PERFORMING ANY MACHINE LEARNING ALGORITHM ON THE DATA\n# Step 1 Mean centring\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T19:41:16.616588Z","iopub.execute_input":"2025-05-09T19:41:16.616821Z","iopub.status.idle":"2025-05-09T19:41:16.635466Z","shell.execute_reply.started":"2025-05-09T19:41:16.616803Z","shell.execute_reply":"2025-05-09T19:41:16.634515Z"}},"outputs":[],"execution_count":60},{"cell_type":"code","source":"X_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T19:41:16.637399Z","iopub.execute_input":"2025-05-09T19:41:16.637730Z","iopub.status.idle":"2025-05-09T19:41:17.233001Z","shell.execute_reply.started":"2025-05-09T19:41:16.637707Z","shell.execute_reply":"2025-05-09T19:41:17.232315Z"}},"outputs":[],"execution_count":61},{"cell_type":"code","source":"# Step 2 : Using PCA\nfrom sklearn.decomposition import PCA\npca = PCA(n_components=300)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T19:44:05.165891Z","iopub.execute_input":"2025-05-09T19:44:05.166683Z","iopub.status.idle":"2025-05-09T19:44:05.170623Z","shell.execute_reply.started":"2025-05-09T19:44:05.166654Z","shell.execute_reply":"2025-05-09T19:44:05.169735Z"}},"outputs":[],"execution_count":70},{"cell_type":"code","source":"# Finding Egien Vector and Value\nX_train_trf = pca.fit_transform(X_train)\nX_test_trf = pca.transform(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T19:44:05.956278Z","iopub.execute_input":"2025-05-09T19:44:05.956621Z","iopub.status.idle":"2025-05-09T19:44:12.492376Z","shell.execute_reply.started":"2025-05-09T19:44:05.956584Z","shell.execute_reply":"2025-05-09T19:44:12.491640Z"}},"outputs":[],"execution_count":71},{"cell_type":"code","source":"X_train.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T19:44:12.493651Z","iopub.execute_input":"2025-05-09T19:44:12.494309Z","iopub.status.idle":"2025-05-09T19:44:12.499995Z","shell.execute_reply.started":"2025-05-09T19:44:12.494274Z","shell.execute_reply":"2025-05-09T19:44:12.499186Z"}},"outputs":[{"execution_count":72,"output_type":"execute_result","data":{"text/plain":"(33600, 784)"},"metadata":{}}],"execution_count":72},{"cell_type":"code","source":"X_train_trf.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T19:44:12.500960Z","iopub.execute_input":"2025-05-09T19:44:12.501282Z","iopub.status.idle":"2025-05-09T19:44:12.518955Z","shell.execute_reply.started":"2025-05-09T19:44:12.501255Z","shell.execute_reply":"2025-05-09T19:44:12.518237Z"}},"outputs":[{"execution_count":73,"output_type":"execute_result","data":{"text/plain":"(33600, 300)"},"metadata":{}}],"execution_count":73},{"cell_type":"code","source":"knn = KNeighborsClassifier()\n\nknn.fit(X_train_trf,Y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T19:44:12.520948Z","iopub.execute_input":"2025-05-09T19:44:12.521207Z","iopub.status.idle":"2025-05-09T19:44:12.577437Z","shell.execute_reply.started":"2025-05-09T19:44:12.521184Z","shell.execute_reply":"2025-05-09T19:44:12.576759Z"}},"outputs":[{"execution_count":74,"output_type":"execute_result","data":{"text/plain":"KNeighborsClassifier()","text/html":"<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":74},{"cell_type":"code","source":"y_pred_trf = knn.predict(X_test_trf)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T19:44:12.578170Z","iopub.execute_input":"2025-05-09T19:44:12.578501Z","iopub.status.idle":"2025-05-09T19:44:15.787778Z","shell.execute_reply.started":"2025-05-09T19:44:12.578454Z","shell.execute_reply":"2025-05-09T19:44:15.787007Z"}},"outputs":[],"execution_count":75},{"cell_type":"code","source":"accuracy_score(Y_test,y_pred_trf)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-09T19:44:15.788575Z","iopub.execute_input":"2025-05-09T19:44:15.788807Z","iopub.status.idle":"2025-05-09T19:44:15.795571Z","shell.execute_reply.started":"2025-05-09T19:44:15.788779Z","shell.execute_reply":"2025-05-09T19:44:15.794881Z"}},"outputs":[{"execution_count":76,"output_type":"execute_result","data":{"text/plain":"0.9476190476190476"},"metadata":{}}],"execution_count":76},{"cell_type":"code","source":"# Now to find how many PCA we will need to get best result i will run the loop for 785 times","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}